# -*- coding: utf-8 -*-
"""CA1_WebScraping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CFLRqsHtTGhw2EBSKjRc6dmYbUepjhcX

#Web scraping
"""

#BeautifulSoup and urlopen are used to perform web scraping
import requests
import json
import pandas as pd
from bs4 import BeautifulSoup
from urllib.request import urlopen
import matplotlib.pyplot as plt

#Retriving data from web site and getting response, 200 means successful
url='https://www.did.ie/collections/all-tvs'
resp=requests.get(url)
resp

#Cheking the data retrieved
resp.content

#Creating the soup element with the data retrieved from the website
soup=BeautifulSoup(resp.content)

#Getting specific elements from the data using HTML comands
ul=soup.find('div',{'class':"collection-matrix__wrapper"})
items=ul.find_all('div',{'class':"product-wrap"})

#Each item in the items variable represent one product
len(items)

#Looping indise each item and getting specific data about each product
info=[]
for item in items:
  record={}
  record['vendor']=(item.find('span',{'class':"product-thumbnail__vendor"}).text.replace('\n ','')).strip()
  record['description']=(item.find('a',{'class':"product-thumbnail__title"}).text)
  #some product may not have price. This function handles those cases
  if item.find('span',{'class':"money"}) is None:
    pass
  else:
    record['price']=float(item.find('span',{'class':"money"}).text.replace('â‚¬','').replace(',',''))
  info.append(record)

#Cheking the format of the resulting object
print(type(info))
print(info[0])

#Creating the dataframe object
df0=pd.json_normalize(info)
df0

"""**notes:** as shown in the data frame, the description variable has many details about the product. For this reason, in the next section the feature ingenieering process is applied to split the description into more variables getting a better products understanding.

##Feature engineering

In this section first, it was necessary to describe the behavior of the variable called 'info'. The info variable is a list of dictionaries than can be navigated using a loop function. Then, the split function was used to split the data contained in the description variable taking advantage of the '|' and ',' symbols to obtain color, features and code variables.

The resulting object of the split function is a list of elements that can be accessed by indexes and assigned individually to variables. Then, the new variables are added to the dictionary.
"""

#Looping into the info list to split description into more variables
for x in info:
  splitted = x['description'].split(' - ')
  x['features'] = splitted[0]
  partTwo = splitted[1].split(' | ')
  x['color'] = partTwo[0]
  x['code'] = partTwo[1]
  x.pop('description')
info

#Creating the new data frame
df=pd.json_normalize(info)
#Removing the 'Not a number' values
df.dropna(inplace=True)
df

"""#Data base (MongoDB)

## Saving data
"""

!python -m pip install pymongo==3.7.2

import pymongo
client = pymongo.MongoClient("mongodb+srv://Alex92:Alex92@cluster0.j8i8bfa.mongodb.net/?retryWrites=true&w=majority")
print(client.stats)
print(client.list_database_names())

#Creating and setting the data base
db = client.ProgramingCourse

#Crearing the collection (the collection must be created just once)
#db.create_collection('ca1_alltvs')

#Setting the collection
collection = db.ca1_alltvs

#Saving data in the Mongo DB data base
collection.insert_many(info)

#Checking whether the saving process was successful
list (collection.find())

"""## Queries

1. What are the names of all the vendor the shop offers?

---
"""

#Retrive all the vendor in the store
vendors = collection.distinct("vendor")
vendors

"""2. What are the televisions available from the vendor LG in color black?


---


"""

#Retrive TV color black and from the vendor 'LG'
lg = list ( collection.find({'vendor':'LG','color':'Black'}))
df_lg=pd.json_normalize(lg)
df_lg.dropna(inplace=True)
df_lg

"""3. What are the televisions in the range between EU 400 and EU 500?

---


"""

#Retrieve based on range. The symbol $gt means greater than, and $lt less than
range = collection.find({'price':{'$gt':400,'$lt':500}})
df_range=pd.json_normalize(range)
df_range.dropna(inplace=True)
df_range

"""4. What are the cheapest vendor?

---


"""

#Retrieve all the information and convert into data frame
all = list ( collection.find({}))
df_all = pd.DataFrame(all)
df_all.dropna(inplace=True)

#Groupby function applied to know the average price by vendor
dt_result = df_all.groupby('vendor')['price'].mean()
dtr = (dt_result.to_frame()).sort_values('price', ascending=True).round(decimals=2)
print(dtr)

#Graph the results to have a better understanding
fig, ax = plt.subplots()
ax.bar(dt_result.index,dt_result)
ax.set_xticklabels(dt_result.index, rotation=90)
ax.set_ylabel('EU')
ax.set_title('Average TVs price')
plt.style.use('bmh')
plt.show()

"""Answer: the cheapest vendor is Thor

##Delete data
"""

#Delete all the content in the Mongo DB collection
#collection.remove({})

"""#References

MongoDB, Inc., (2022), MongoDB manual, db.collection.find() at: https://www.mongodb.com/docs/manual/reference/method/db.collection.find/ (Accessed: 08 Dic 2022).

John Petrone, (2014) 'List all values of a certain field in mongodb' [stackoverflow]. 14 April. Available at: https://stackoverflow.com/questions/23273123/list-all-values-of-a-certain-field-in-mongodb?newreg=529caaed422e42d08b0a7d3468a63bc3 (Accessed: 08 Dic 2022).

Giffy, (2020) 'MongoDB_PyMongo_Tutorial/1.1_First_steps_with_MongoDB-PyMongo.ipynb' [GitHub]. 24 March. Available at: https://github.com/Giffy/MongoDB_PyMongo_Tutorial/blob/master/1_1_First_steps_with_MongoDB_PyMongo.ipynb (Accessed: from 02 Dic 2022 to 08 Dic 2022).
"""